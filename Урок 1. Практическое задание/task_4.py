"""
Задание 4.

Для этой задачи:
1) придумайте 2-3 решения (обязательно с различной сложностью)
2) оцените сложность каждого выражения в этих решениях в нотации О-большое
3) оцените итоговую сложность каждого решения в нотации О-большое
4) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Пользователи веб-ресурса проходят аутентификацию.
В системе хранятся логин, пароль и отметка об активации учетной записи.

Нужно реализовать проверку, может ли пользователь быть допущен к ресурсу.
При этом его учетка должна быть активирована.
А если нет, то польз-лю нужно предложить ее пройти.

Приложение должно давать ответы на эти вопросы
 и быть реализовано в виде функции.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, применить словарь.

Примечание: ПРОШУ ВАС ВНИМАТЕЛЬНО ЧИТАТЬ ЗАДАНИЕ!
"""
# Поиск пользователя в словаре: Сложность операции поиска в словаре — O(1).
# Проверка пароля и активации: Все эти операции — сравнение строк и проверка булевых значений,
# также имеют сложность O(1).

users_dict = {
    'user1': ('password123', True),
    'user2': ('mypassword', False),
    'user3': ('securepass', True)
}

def authenticate_user(username, password):
    return users_dict.get(username) == (password, True)



users_list = [
    {'login': 'user1', 'password': 'password123', 'is_active': True},
    {'login': 'user2', 'password': 'mypassword', 'is_active': False},
    {'login': 'user3', 'password': 'securepass', 'is_active': True}
]


# Поиск пользователя в списке: Сложность операции поиска в списке — O(n),
# где n — длина списка.
def authenticate_user(username, password):
    for data in users_list:
        if data['login'] == username and data['password'] == password and data['is_active']:
            return True
    return False


"""
Оценка решений:
Решение 1 (словарь с логинами как ключами) — сложность O(1)
для поиска и проверки данных. Это решение эффективно и быстро.

Решение 2 (список словарей) — сложность O(n),
так как необходимо пройти по всем элементам списка для поиска пользователя.

Вывод:
Наиболее эффективными являются Решение 1, поскольку онo имеeт сложность O(1) для поиска пользователя и проверки его данных.
Решение 2 имеет сложность O(n) из-за необходимости проходить по всему списку(в худшем случае),
что делает его менее эффективным для больших наборов данных.
"""