"""
Задача 3.
В соответствии с документацией Python,
deque – это обобщение стеков и очередей.
Вот основное правило: если вам нужно
что-то быстро дописать или вытащить, используйте deque.
Если вам нужен быстрый случайный доступ, используйте list

Задача: создайте простой список (list) и очередь (deque).
Выполните различные операции с каждым из объектов.
Сделайте замеры и оцените, насколько информация в документации
соответствует дейстивтельности.

1) сравнить операции
append, pop, extend списка и дека и сделать выводы что и где быстрее

2) сравнить операции
appendleft, popleft, extendleft дека и соответствующих им операций списка
и сделать выводы что и где быстрее

3) сравнить операции получения элемента списка и дека
и сделать выводы что и где быстрее

Подсказка:
для того, чтобы снизить погрешность, желательно операции по каждой ф-ции
(append, pop и т.д.) проводить в циклах. Для замеров используйте timeit.
"""
import task_3_1
import task_3_2
import task_3_3

task_3_1.run_tests()
"""
Как видно из полученных результатов, операции:
1)Операция append:
Для списка и deque разница будет минимальной, обе операции выполняются за O(1).
Однако, в случае использования большого количества данных, deque может быть немного быстрее.

2) Операция pop:
Для обеих структур данных pop выполняется за O(1), и результаты будут схожи.
В случае очень большого числа операций список и deque будут работать одинаково быстро.

3) Операция extend:
В случае списка, операция может быть медленнее при больших объемах данных из-за особенностей реализации списка.
Deque, будучи оптимизированным для работы с концами, может справляться с этим немного быстрее.
"""
task_3_2.run_tests()
"""
Итог: deque показывает значительное преимущество для операций с начала коллекции (добавление, удаление, расширение)
по сравнению с списком, так как работает с концами коллекции намного быстрее,
чем список, который требует сдвига всех элементов при работе с его началом.
"""
task_3_3.run_tests()
"""
Итог:
Список: доступ по индексу и изменение элемента выполняется быстрее,
поскольку списки в Python поддерживают прямой доступ к элементам за O(1).
Deque: доступ по индексу и изменение элемента выполняется медленнее,
так как очереди deque предназначены для быстрых операций добавления и удаления с обоих концов,
но не оптимизированы для случайного доступа к элементам.
"""
